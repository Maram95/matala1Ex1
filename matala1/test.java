
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author maram
 */
public class test {
     
    
    public test(String file,String file2 ) throws IOException{
        
         String filename=file+".txt";
           BufferedReader reader = new BufferedReader(new FileReader(filename));
            String name ="result"+file+".txt";
          // BufferedWriter writer = new BufferedWriter(new FileWriter(name));
            File f=new File (name);
            PrintWriter outs = new PrintWriter(f);
           // outs.print("Hi");
            // outs.println("regenerated by a simple SE1_EX1 solution");
           
             String line = null;
             String str;
             str=reader.readLine();
             int lines=Integer.parseInt(str);
              outs.println(lines+" regenerated by a simple SE1_EX1 solution");

               while ((line = reader.readLine()) != null) {
                    String filename1=file2;
         WeighedDigraph  graph = new WeighedDigraph(filename1);
               line=line.trim();
                 String[] parts = line.split("\\s+");
                //System.out.println(Integer.parseInt(parts[0]));
               outs.print(parts[0]+" ");
               int VertexA=Integer.parseInt(parts[0]);
                   //System.out.println(Integer.parseInt(parts[1]));
               int VertexB=Integer.parseInt(parts[1]);
                outs.print(parts[1]+" ");
               int loop=Integer.parseInt(parts[2]);
                outs.print(parts[2]+" ");
               int i=3;
                  // System.out.println(Integer.parseInt(parts[3]));
               //ArrayList <Integer>  blacklist = new ArrayList();
                   int [] arr=new int[loop];
               for(int j=0;j<loop;j++){
              // blacklist.add(Integer.parseInt(parts[i]));
                arr[j]=Integer.parseInt(parts[i]);
                 outs.print(parts[i]+" ");
                   i++;   
               }
                  // System.out.println(blacklist);
              // if (blacklist.size()>0){
             //  for( int k : blacklist){
                //  System.out.println(blacklist.get(1));
            // int current =blacklist.get(i);

               for(int k=0;k<arr.length;k++){
                   ArrayList<WeighedDigraphEdge> neighbors = graph.edgesOf(arr[k]);
               
         for (WeighedDigraphEdge neighbor : neighbors){
           
               neighbor.set(Double.POSITIVE_INFINITY);
        }
               }
                
               DijkstraFind finder = new DijkstraFind(graph);
               if(finder.shortestPath(VertexA, VertexB)==0)
                   outs.print(finder.shortestPath(VertexB, VertexA) + "\n");
               else
               outs.print(finder.shortestPath(VertexA, VertexB) + "\n");
    
               }
     outs.close();
    }
     public static void main(String args[]) throws IOException {
        //WeighedDigraph graph;
         test a=new test( "test1","tinyEWD");
     }
    
}
